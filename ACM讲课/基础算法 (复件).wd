## 基础算法

### 1.素数判断(暴力, 素数筛,线性筛,求约数个数,求约数和)

**1.素数是什么样的呢?**

**答:简单地说就是除了1和他本身不能被其他数整除的数(如2, 3, 5, 7, 11, 13)**

**暴力法:利用循环判断有没有可以整除n的数,直到循环到n-1,如若没有一个数可以整除n则n为素数,否则n为合数**

**上代码**

```c
#include <stdio.h>

int is_prime(int n) {
    if (n <= 1) return 0;
    for (int i = 2; i * i <= n; i++) {
        if (n % i == 0) return 0;
    }
    return 1;
}

int main() {
    int n;
    while(scanf("%d", &n) != EOF) {
        if (!is_prime(n)) printf("NO\n");
        else printf("YES\n");
    }
    return 0;
}
```

**素数筛:素数筛的思想就是从2开始将其倍数全部筛掉,然后在筛掉3的倍数,判断n是否被筛,没被筛的话筛n的倍数,筛过的话n加1.    (简单地说就是,用素数n筛掉n的倍数,因为n的倍数一定是合数)**

**取30个数模拟一下素数筛的过程**

**上代码**

```c
#include <stdio.h>
#define max 1000

int prime[max + 5] = {0};


void init() {
    prime[0] = prime[1] = 1;
    for (int i = 2; i * i < max; i++) {
        if (prime[i]) continue;
        for (int j = 2 * i; j <= max; j += i) {
            prime[j] = 1;
        }
    }
    return ;
}
int main() {
    init();
    int n;
    while(scanf("%d", &n) != EOF) {
        if (n <= max && prime[n] == 0) printf("YES\n");
        else printf("NO\n");
    }
    return 0;
}
```

**练习题:我输入一个10000以内的数字n, 要求输出n的最大素因子**

```c
#include <stdio.h>
#define max 1000

int prime[max + 5] = {0};


void init() {
    prime[0] = prime[1] = 1;
    for (int i = 2; i < max; i++) {
        if (!prime[i])
            for (int j = i; j <= max; j += i) {
                prime[j] = i;
            }
    }
    return ;
}
int main() {
    init();
    int n;
    while(scanf("%d", &n) != EOF) {
        printf("%d\n", prime[n]);
    }
    return 0;
}
```



**练习题:我输入一个10000以内的数字n, 要求输出n的最小素因子**

```c
#include <stdio.h>
#define max 1000

int prime[max + 5] = {0};


void init() {
    prime[0] = prime[1] = 1;
    for (int i = 2; i < max; i++) {
        if (!prime[i])
            for (int j = i; j <= max; j += i) {
                if (!prime[j])
                    prime[j] = i;
            }
    }
    return ;
}
int main() {
    init();
    int n;
    while(scanf("%d", &n) != EOF) {
        printf("%d\n", prime[n]);
    }
    return 0;
}
```



**看似素数筛很不错, 但是6被2, 3都标记过,一共标记过2次, 会不会觉得有些浪费时间呢?**

**3.线性筛:线性筛就不会重复标记那些数字了,**

**一个合数N可以写成一个素数m与合数(或素数)n的乘积N = m * n**

**例如12 = 2 * 6 **

**12 = 3 * 4**

**这个12我们让他只会被6标记(也就是用最大的因子去标记N)**

**每遇到一个素数m都会将m存进数组**

**练习一下:取30个数模拟一下线性筛的过程**

```c
#include <stdio.h>
#define max 1000

int prime[max + 5] = {0};
int add[max + 5] = {0};

void init() {
    add[0] = add[1] = 1;
    for (int i = 2; i <= max; i++) {
        if (!add[i]) prime[++prime[0]] = i;
        for (int j = 1; j <= prime[0]; j++) {
            if (prime[j] * i > max) break;
            add[prime[j] * i] = 1;
            if (i % prime[j] == 0) break;
        }
    }
    return ;
}
int main() {
    init();
    int n;
    while (scanf("%d", &n) != EOF) {
        if (add[n]) printf("NO\n");
        else printf("YES\n");
    }
    return 0;
}
```

**求约数个数: 求约数个数思考以下几个问题**

**1. 12的约数都有谁？(1, 2, 3, 4, 6,12) 6个**

**2.  3的约数都有谁？(1, 3) 2个**

**3. 4的约数都有谁？(1, 2, 4) 3个**

**也就是说12的约数个数等于 3的约数个数 乘以 4的约数个数(推测)**

**F(N) = F(M) * F(n)     若 N = M * n (一定对么？)**

**2 (1, 2)  2个 6(1, 2, 3, 6)  4个 显然此时F(N) != F(M) * F(n)**

**以下代码dnum数组中存储的是因子个数，snum存的是因子和**

**当Ｍ(prime[j])与ｎ(i)互素的时候：``` dnum[prime[j] * i] = dnum[prime[j]] * dnum[i] ``` **

**``snum[prime[j] * i] = snum[prime[j]] * snum[i]  ``**

**当M(prime[j])与ｎ(i)不互素( 也就是ｎ%M == 0的时候)：`` dnum[prime[j] * i] = dnum[i] / (mnum[i] + 1) * (mnum[i] + 2) `` **

**``snum[prime[j] * i] = snum[i] / (pow(prime[j], mnum[i] + 1) - 1) * (pow(prime[j], mnum[i] + 2) - 1) ``**

```c
/*************************************************************************
	> File Name: shu.c
	> Author: 陈常寅
	> Mail: 1303501514@qq.com
	> Created Time: 2019年01月27日 星期日 19时11分57秒
 ************************************************************************/

#include <stdio.h>
#include <math.h>
#define max 1000000

int prime[max + 5] = {0};
int dnum[max + 5] = {0};
int mnum[max + 5] = {0};
int snum[max + 5] = {0};

void init() {
    for (int i = 2; i <= max; i++) {
        if (!prime[i]) {
            prime[++prime[0]] = i;
            mnum[i] = 1;
            dnum[i] = 2;
            snum[i] = 1 + i;
        }
        for (int j = 1; j <= prime[0]; j++) {
            if (prime[j] * i > max) break;
            prime[prime[j] * i] = 1;
            if (i % prime[j] == 0) {
                mnum[prime[j] * i] = mnum[i] + 1;
                dnum[prime[j] * i] = dnum[i] / (mnum[i] + 1) * (mnum[i] + 2);
                snum[prime[j] * i] = snum[i] / (pow(prime[j], mnum[i] + 1) - 1) * (pow(prime[j], mnum[i] + 2) - 1);
                break;
            } else {
                mnum[prime[j] * i] = 1;
                dnum[prime[j] * i] = dnum[prime[j]] * dnum[i];
                snum[prime[j] * i] = snum[prime[j]] * snum[i];
            }
        }
    }
    return ;
}

int main() {
    init();
    int n;
    while (scanf("%d", &n) != EOF) {
        printf("%d: sum(%d) num(%d)\n", n, snum[n], dnum[n]);
    }
    return 0;
}
```

**亲和数**

记d(n)为n的所有真因数（小于n且整除n的正整数）之和。
如果d(a) = b且d(b) = a，且a ≠ b，那么a和b构成一个亲和数对，a和b被称为亲和数。

例如，220的真因数包括1、2、4、5、10、11、20、22、44、55和100，因此d(220) = 284；而284的真因数包括1、2、4、71和142，因此d(284) = 220。

求所有小于10000的亲和数的和。(**31626**)

```c
#include <stdio.h>
#include <math.h>
#define max 10000

int prime[max + 5] = {0};
int fnum[max + 5] = {0};
int mnum[max + 5] = {0};
int Snum[max + 5] = {0};
void init() {
    for (int i = 2; i <= max; i++) {
        if (!prime[i]) {
            prime[++prime[0]] = i;
            fnum[i] = 2;
            mnum[i] = 1;
            Snum[i] = 1 + i;
        }
        for (int j = 1; j <= prime[0]; j++) {
            if (prime[j] * i > max) break;
            prime[i * prime[j]] = 1;
            if (i % prime[j] == 0) {
                mnum[prime[j] * i] = mnum[i] + 1;
                fnum[prime[j] * i] = fnum[i] / (mnum[i] + 1) * (mnum[i] + 2);
                Snum[prime[j] * i] = Snum[i] / (pow(prime[j], mnum[i] + 1) - 1) * (pow(prime[j], mnum[i] + 2) - 1);
                break;
            } else {
                mnum[prime[j] * i] = 1;
                fnum[prime[j] * i] = fnum[prime[j]] * fnum[i];
                Snum[prime[j] * i] = Snum[prime[j]] * Snum[i];
            }
        }
    }
    return ;
}

int main() {
    init();
    long long int sum = 0;
    for (int i = 1; i < max; i++) {
        Snum[i] -= i;
    }
    for (int i = 2; i < 10000; i++) {
        if (Snum[i] <= max && Snum[Snum[i]] == i && Snum[i] != i) {
            sum += Snum[i];
        }
    }
    printf("%lld\n", sum);
    return 0;
}
```



**并非盈数之和**

完全数是指真因数之和等于自身的那些数。例如，28的真因数之和为1 + 2 + 4 + 7 + 14 = 28，因此28是一个完全数。

一个数n被称为亏数，如果它的真因数之和小于n；反之则被称为盈数。

由于12是最小的盈数，它的真因数之和为1 + 2 + 3 + 4 + 6 = 16，所以最小的能够表示成两个盈数之和的数是24。通过数学分析可以得出，所有大于28123的数都可以被写成两个盈数的和；尽管我们知道最大的不能被写成两个盈数的和的数要小于这个值，但这是通过分析所能得到的最好上界。

找出所有不能被写成两个盈数之和的正整数，并求它们的和。(**4179871**)

```c
#include <stdio.h>
#include <math.h>

#define max 28123

int prime[max + 5] = {0};
int Snum[max + 5] = {0};
int mnum[max + 5] = {0};
int dnum[max + 5] = {0};
void init() {
    for (int i = 2; i <= max; i++) {
        if (!prime[i]) {
            prime[++prime[0]] = i;
            mnum[i] = 1;
            Snum[i] = 1 + i;
        }
        for (int j = 1; j <= prime[0]; j++) {
            if (prime[j] * i > max) break;
            prime[prime[j] * i] = 1;
            if (i % prime[j] == 0) {
                mnum[prime[j] * i] = mnum[i] + 1;
                Snum[prime[j] * i] = Snum[i] / (pow(prime[j], mnum[i] + 1) - 1) * (pow(prime[j], mnum[i] + 2) - 1);
                break;
            } else {
                mnum[prime[j] * i] = 1;
                Snum[prime[j] * i] = Snum[prime[j]] * Snum[i];
            }
        }
    }
    return ;
}

int main() {
    init();
    Snum[0] = 0;
    for (int i = 1; i <= max; i++) {
        Snum[i] -= i;
        if (Snum[i] > i) Snum[++Snum[0]]= i;
    }
    for (int j = 1; j <= Snum[0]; j++) {
        for (int i = j; i <= Snum[0]; i++) {
            if (Snum[i] + Snum[j] > max) break;
            dnum[Snum[i] + Snum[j]] = 1;
        }
    }
    int sum = 0;
    for (int i = 0; i <= max; i++) {
        if (!dnum[i]) sum += i;
    }
    printf("%d\n", sum);
    return 0;
}
```



### 2.高精度,加减乘除混合

**什么是高精度运算？**

       实际上高精度就是说参与运算的数据和运算结果的范围，超出标准数据类型能表示的数据大小范围的运算。这个时候，如果要得到正确的计算结果，显然不能依靠普通方法实现了。而要在普通运算原理的基础上，加以辅助算法来实现超大数据的计算。例如：求两个100位的数据的和，或者计算两个100位的数字乘积。这时就要用到高精度算法了。**
       
       
       大数的基本思维就是，开一个足够长的数组，将数字的每一位存入数组中，从下标为０开始，由低位到高位存储，一般是每个数组存一位**
       
| 下标      | ０   | １   | ２   | ３   | ４   | ５   | ６   | ７   | ８   |
| --------- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- |
| 911235813 | 3    | 1    | 8    | 5    | 3    | 2    | 1    | 1    | 9    |
| 523364321 | 1    | 2    | 3    | 4    | 6    | 3    | 3    | 2    | 5    |
| 171001401 | 1    | 0    | 4    | 1    | 0    | 0    | 1    | 7    | 1    |

**大数加法**

两个大数我们可以用数组来保存，然后在数组中逐位进行相加，再判断该位相加后是否需要进位，为了方便计算，我们将数字的低位放在数组的前面，高位放在后面。

```c
/*************************************************************************
	> File Name: bignumber_sum1.c
	> Author: 陈常寅
	> Mail: 1303501514@qq.com
	> Created Time: 2019年01月29日 星期二 13时36分03秒
 ************************************************************************/

#include<stdio.h>
#include<string.h>

#define MAX 1000    // 大数的最大位数 

 
/*
  大数加法 
  参数： 
  num1为第一个大数，用字符数组保存
  num2为第二个大数
  sum数组保存相加的结果  即：num1+num2=sum
  返回值：返回数组sum的有效长度，即计算结果的位数 
 */
int Addition(char num1[], char num2[], int sum[]) {
    int i, j, len;
    int n2[MAX] = {0};
    int len1 = strlen (num1); // 计算数组num1的长度，即大数的位数 
    int len2 = strlen (num2); // 计算数组num2的长度，即大数的位数 

    len = len1>len2 ? len1 : len2; // 获取较大的位数
    //将num1字符数组的数字字符转换为整型数字，且逆向保存在整型数组sum中，即低位在前，高位在后
    for (i = len1-1, j = 0; i >= 0; i--, j++) 
        sum[j] = num1[i] - '0';
    // 转换第二个数 
    for (i = len2-1, j = 0; i >= 0; i--, j++)
        n2[j] = num2[i] - '0';
    // 将两个大数相加 
    for (i = 0; i <= len; i++) {
        sum[i] += n2[i];  // 两个数从低位开始相加 
        if (sum[i] > 9) {   // 进位 
            sum[i] -= 10;
            sum[i+1]++;
        }
    }
    if(sum[len] != 0)  // 判断最高位是否有进位 
        len++;
    return len;   // 返回和的位数 
}

int main() {
    int i, len;
    int sum[MAX] = {0}; // 存放计算的结果，低位在前，高位在后，即sum[0]是低位 
    char num1[] = "1234567891234567891234"; // 第一个大数 
    char num2[] = "2345678912345678913345"; // 第二个大数 
    len = Addition(num1, num2, sum);    // 两数相加 
    printf("%s\n  +\n%s\n  =\n", num1, num2);
    // 反向输出求和结果
    for (i = len-1; i >= 0; i--)
        printf("%d", sum[i]);
    printf("\n"); 
    return 0;
}
```

**大数乘法：　求２^1000^**

```c
/*************************************************************************
	> File Name: euler16.c
	> Author: 
	> Mail: 
	> Created Time: 2018年12月22日 星期六 18时33分00秒
 ************************************************************************/

#include <stdio.h>

int main() {
    int ans[400] = {0};
    ans[0] = ans[1] = 1;
    for (int i = 0; i < 100; i++) {
        for (int j = 1; j <= ans[0]; j++) ans[j] <<= 10;
        for (int j = 1; j <= ans[0]; j++) {
            if (ans[j] < 10) continue;
            ans[j + 1] += ans[j] / 10;
            ans[j] %= 10;
            ans[0] += (j == ans[0]);
        }
    }
    int sum = 0;
    for (int i = ans[0]; i > 0; i--) {
        sum += ans[i];
        printf("%d", ans[i]);
    }
    printf("\n");
    printf("%d\n", sum);
    return 0;
}
```

**练习题：1.输入一个数ｎ(n <= 50) 求n的阶乘**

**2.n! 的意思是 n × (n − 1) × … × 3 × 2 × 1**

**例如，10! = 10 × 9 × … × 3 × 2 × 1 = 3628800，所以10!的各位数字和是 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27**

**求出100!的各位数字和。(648)**

### 3.二分,三分(花式二分,三分)

二分指的是一分为二的二分，举一个例子，在一个有序数列中，１　２　３　４　５　６　７　８　９　我要查找一个数字６，我们的思路就是，找一个头，一个尾，然后取中间值与要查找的数字比较，之后更新头和尾，直到找到所找的数字６为止。

**二分法(折半查找)，每次将问题的规模缩小一半。**

**min是头指针；max是尾指针，mid=(min + max) / 2**

**调整：如果arr[mid] < x, min = mid + 1 **

**如果arr[mid] > x max = mid - 1 **

**如果arr[mid] == x, 找到结果**

**终止条件:min >= max**

**练习题：五边形数**

五边形数由公式Pn=n(3n−1)/2生成。前十个五边形数是：

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, …

可以看出P4 + P7 = 22 + 70 = 92 = P8。然而，它们的差70 − 22 = 48并不是五边形数。

在所有和差均为五边形数的五边形数对Pj和Pk中，找出使D = |Pk − Pj|最小的一对；此时D的值是多少？

```c
#include <stdio.h>
#include <inttypes.h>
int64_t pentagonal(int64_t n) {
    return n * (3 * n - 1) / 2;
}

int64_t is_pentagonal(int64_t x) {
    int64_t head = 1, tail = 5000000000, mid;
    while (head <= tail) {
        mid = (head + tail) >> 1;
        if (pentagonal(mid) == x) return 1;
        if (pentagonal(mid) < x) head = mid + 1;
        else tail = mid - 1;
    }
    return 0;
}

int main()  {
    int64_t i = 1, j = 1, ans = INT64_MAX;
    while (pentagonal(j + 1) - pentagonal(j) < ans) { //*
        j++;
        i = j - 1;
        do {
            if (is_pentagonal(pentagonal(j) + pentagonal(i))) {
                if (is_pentagonal(pentagonal(j) - pentagonal(i))) {
                    if (pentagonal(j) - pentagonal(i) < ans) {
                        ans = pentagonal(j) - pentagonal(i);
                    }
                }
            }
            i--;
        } while(i && pentagonal(j) - pentagonal(i) < ans);//*
    }
    printf("%"PRId64"\n", ans);
    return 0;
}
```



